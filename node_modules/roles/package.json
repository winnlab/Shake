{
  "name": "roles",
  "version": "0.0.5",
  "description": "NodeJS Role Management",
  "homepage": "http://dresende.github.com/node-roles",
  "keywords": [
    "acl",
    "role",
    "permission"
  ],
  "author": {
    "name": "Diogo Resende",
    "email": "dresende@thinkdigital.pt"
  },
  "contributors": [],
  "engines": {
    "node": ">= 0.4.0"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/dresende/node-roles.git"
  },
  "directories": {
    "lib": "./lib",
    "example": "./examples"
  },
  "main": "./lib/roles",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/dresende/node-roles/raw/master/LICENSE"
    }
  ],
  "scripts": {
    "text": "vows --spec test/*"
  },
  "readme": "## NodeJS Roles ![ Travis CI ](https://secure.travis-ci.org/dresende/node-roles.png)\n\nManage application and profile roles in a simple manner. You can define your applications/modules and set\na couple of roles (permissions). Then you can define profiles and add application roles to it. You can\nexport the profiles and applications in JSON format to import later.\n\n## Install\n\n    npm install roles\n\n## API\n\nTo use Roles, just include it in your code.\n\n    var roles = require(\"roles\");\n\n### Creating an application\n\nAn application can be your entire application or an application module, it's your choice to split the\nroles into several applications (modules) or have all roles in one big application. To create an\napplication you just have to define a name.\n\n    var myApp = roles.addApplication(\"myapp\");\n\nYou can then add and remove roles from it.\n\n    myApp.addRoles(\"create\")\n         .addRoles(\"remove\")\n         .addRoles(\"view\");\n    // or add them all at once\n    myApp.addRoles(\"create\", \"remove\", \"view\", \"list\");\n    // you can remove the same way\n    myApp.removeRoles(\"list\");\n\nYou could do this all in the application constructor:\n\n    var myApp = roles.addApplication(\"myapp\", [ \"create\", \"remove\", \"view\" ]);\n\n### Creating a profile\n\nA profile is a way of defining a set of permissions that someone or something (that has that profile\nassociated) can use to access somewhere or something. Confused?\n\n    var guestProfile = roles.addProfile(\"guest\"),\n        managerProfile = roles.addProfile(\"manager\");\n\n    guestProfile.addRoles(\"myapp.view\");\n    managerProfile.addRoles(\"myapp.*\"); // this is auto-updated if MyApp changes roles\n\nJust like in the Application constructor, this could be defined with less calls:\n\n    var guestProfile = roles.addProfile(\"guest\", [ \"myapp.view\" ]),\n        managerProfile = roles.addProfile(\"manager\", \"myapp.*\");\n\n### Testing roles\n\nNow that you have your applications and profiles defined, it's simple to test roles. Imagine you have\na user that you assign the profile called \"guest\". You can test for a specific permission like this:\n\n    // return true\n    console.log(\"Guest has myapp.view role?\", guestProfile.hasRoles(\"myapp.view\"));\n\nIf you don't assign the profiles and applications to a variable, you can retrieve them using the `roles`.\n\n    // return true\n    console.log(\"Guest has myapp.view role?\", roles.getProfile(\"guest\").hasRoles(\"myapp.view\"));\n\nJust like adding roles, you can also test if a profile has more than one role.\n\n    // return true\n    console.log(\"Manager has myapp.view/create role?\", managerProfile.hasRoles(\"myapp.view\", \"myapp.create\"));\n\nIf any of the roles is not assigned to a profile, it woule return `false`. If you just want to check for\nat least one role, you can use the alternative .hasAnyRoles.\n\n    // return true\n    console.log(\"Guest has myapp.view/create role?\", guestProfile.hasAnyRoles(\"myapp.view\", \"myapp.create\"));\n\n### Export/import\n\nTo save your work, you can export all the applications and profiles.\n\n    jsonData = roles.export(); // save the returned JSON to a file or database\n\nFollowing the same pattern, you can import later.\n\n    roles.import(jsonData); // everything will be reseted before importing\n\n## License (MIT)\n\nCopyright (C) 2011 by Diogo Resende\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dresende/node-roles/issues"
  },
  "_id": "roles@0.0.5",
  "dist": {
    "shasum": "a2312e9c07675b7cc4c1fef66c3cc2d5d1015ebd"
  },
  "_from": "https://github.com/Rastopyr/node-roles/tarball/master",
  "_resolved": "https://github.com/Rastopyr/node-roles/tarball/master"
}
